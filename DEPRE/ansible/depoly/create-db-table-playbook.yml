---
    # Usicommunity.postgresql collection
    # https://docs.ansible.com/ansible/latest/collections/community/postgresql/index.html
    # To install it, use: ansible-galaxy collection install community.postgresql.
  # To use it in a playbook, specify: community.postgresql.postgresql_query.

  # on Mac, urlopen error [SSL: CERTIFICATE_VERIFY_FAILED]
  # >wpip inpip install certifi


  # Get docker ip to test on your local machine
  # > docker inspect  docker-flask-postgres_db_1 | grep -i "IPaDDreSS"
  # "IPAddress": "172.19.0.2",

  # How to use playbook
  # $ansible-playbook create-db-table-playbook.yml -i inventory.yml --vault-password-file .vaultpass


- hosts: aws

  become: yes
  become_method: sudo
  remote_user: ubuntu

  vars_files:
    - vault.yml
  vars:

#    POSTGRES_USER: "{{ POSTGRES_USER }}"
#    POSTGRES_PASSWORD: "{{ POSTGRES_PASSWORD }}"
#    POSTGRES_DB: "{{ POSTGRES_DB }}"
#    POSTGRES_HOST: "{{ POSTGRES_HOST }}"
#    POSTGRES_PORT: "{{ POSTGRES_PORT }}"
#    FLASK_KEY: "{{ FLASK_KEY }}"
#    STOCK_API_KEY: "{{ STOCK_API_KEY }}"

    stock_app_dir: /var/local/stockapp
      #    stock_app_dir: /home/ubuntu/stockapp
    git_repo: https://github.com/sungmin-yang/ansible-aws-docker-app.git



  tasks:
#    - name: Install Docker Module for Python
#      pip:
#        name:
#          - psycopg2-binary
#        state: present
#
    - name: Clone a git repo
      git:
  #      repo: https://github.com/sungmin-yang/ansible-test.git
        repo: '{{git_repo}}'
        dest: '{{ stock_app_dir }}'
        force: yes
#

    - name: Copy credential file to remote for docker-compose.
      copy:
        src: .env
        dest: "{{ stock_app_dir }}"

    - name: Start Docker-compose. Running docker containers.
      community.docker.docker_compose:
        project_src: '{{stock_app_dir}}'
        build: yes
        state: present
      register: output

    - debug: var=output

    - name: Pause 30 sec to fill fake data into DB
      pause:
        seconds: 30

#    - name: Select query to db acme with positional arguments and non-default credentials
#      community.postgresql.postgresql_query:
#        db: testdb
#        port: 5432
#        login_user: admin
#        login_host: localhost
#        login_password: password
#        query: SELECT * FROM Students;
#      register: "out"
#
#    - name: Show test output
#      debug:
#        msg: "{{ out }}"
#
#
#    - name: Install Docker Module for Python
#      pip:
#        name:
#          - docker
#          - docker-compose
#          - psycopg2-binary
#          - SQLAlchemy





    - name: run my script!
      command: >
        python3 retrieve_subset.py
              --user {{POSTGRES_USER}}
              --password {{POSTGRES_PASSWORD}}
              --db {{POSTGRES_DB}}
#              --filename ./files/generated3.csv
      args:
        chdir: "{{ stock_app_dir }}/app"
      register: "out"
      #      delegate_to: 127.0.0.1
      #      run_once: true


    - name: Show test output
      debug:
        msg: "{{ out }}"






#    - name: Insert data into table
#      community.postgresql.postgresql_query:
#        db: testdb
#        port: 5432
#        login_user: admin
#        login_host: localhost
#        login_password: password
#        query: INSERT INTO Students (addr, city, name) VALUES ('Q', 'W', 'E');
#      register: "out"
#
#    - name: Insert data into table
#      community.postgresql.postgresql_query:
#        db: testdb
#        port: 5432
#        login_user: admin
#        login_host: localhost
#        login_password: password
#        query: INSERT INTO Students (addr, city, name) VALUES ( SELECT random(), random() * 100, random() * 1000);
#
#
#
#      register: "out"
#
#
#    - name: Show test output
#      debug:
#        msg: "{{ out }}"




#    - name: Create test_table with several columns in ssd tablespace with fillfactor=10 and autovacuum_analyze_threshold=1
#      community.general.postgresql_table:
#        name: Stocks
#        columns:
#        - id int primary key
#        - date date
#        - high real
#        - company string
#
#        tablespace: ssd
#        storage_params:
#        - fillfactor=10
#        - autovacuum_analyze_threshold=1


#- name: Ensure db table for temp is present
#  postgresql_table:
#    db: myDatabase
#    table: myTable
#    columns:
#    - someColumn TEXT COLLATE "C" NOT NULL
#    - anotherColumn TEXT COLLATE "C" PRIMARY KEY
#    - bla BYTEA PRIMARY KEY
#    - CONSTRAINT  mykey PRIMARY KEY (anotherColumn, bla)
#
#- name: Ensure temp-db-index is present
#  postgresql_idx:
#    db: myDatabase
#    table: myTable
#    columns: anotherColumn
#    name: anotherColumn_idx
